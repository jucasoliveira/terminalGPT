{
  "compilerOptions": {
    /* Docs: https://www.typescriptlang.org/tsconfig */

    /// - Projects
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /// - Language and Environment: Set the JavaScript language version for emitted JavaScript and include compatible library declarations.
    /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "target": "es2022",
    "lib": [
      "ES2022",
      "es6"
    ],
    /* Specify what JSX code is generated. */
    "jsx": "preserve",
    /* Enable experimental support for legacy experimental decorators. */
    "experimentalDecorators": true,
    // Emit ECMAScript-standard-compliant class fields.
    "useDefineForClassFields": false,
    //     "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
    //     "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    //     "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    //     "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    //     "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    //     "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    //     "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    //     "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    //     "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    //     "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    //     "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    //     "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    //     "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */



    /// - Modules: Specify what module code is generated.

    /* Specify the root folder within your source files. */
    "rootDir": "./src",
    /* Specify how TypeScript looks up a file from a given module specifier. */
    "moduleResolution": "node",
    /* Specify the base directory to resolve non-relative module names. */
    "baseUrl": "./",
    /* Specify type package names to be included without being referenced in a source file. */
    "types": [
      "node"
    ],
    //     "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    //     "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    //     "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    //     "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    //     "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    //     "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    //     "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    //     "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    //     "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    //     "resolveJsonModule": true,                        /* Enable importing .json files. */
    //     "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    //     "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */


    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    "module": "commonjs",
    "outDir": "./out",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noUncheckedIndexedAccess": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "esModuleInterop": true,
    "importHelpers": true
  },
  "files": [
    "src/context.ts"
  ],
  "include": [
    "src/*.ts"
  ],
  "exclude": [
    "node_modules",
    "<node_internals>/**"
  ]
}